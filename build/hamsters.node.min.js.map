{"version":3,"sources":["webpack:///webpack/bootstrap bb9647bd755ea3689b2e","webpack:///./src/hamsters.js"],"names":["hamsters","version","maxThreads","determineGlobalMaxThreads","debug","persistence","memoize","atomics","legacy","tools","randomArray","aggregateArrays","aggregateThreadOutputs","splitArrays","splitArrayIntoSubArrays","habitat","browser","isBrowser","worker","isWorker","node","isNode","reactNative","isReactNative","shell","isShell","transferrable","supportsTransferrableObjects","isLegacyEnvironment","supportsAtomicOperations","pool","uri","tasks","errors","threads","running","pending","run","runHamsters","promise","hamstersPromise","loop","hamstersLoop","parseJson","parseJsonOnThread","stringifyJson","stringifyJsonOnThread","init","initializeLibrary","window","process","importScripts","global","Uint8Array","Worker","SharedArrayBuffer","startOptions","processStartOptions","setupBrowserSupport","SharedWorker","setupWorkerSupport","wheel","legacyHamsterWheel","hamsterWheel","spawnHamsters","chewGarbage","RegExp","isNaN","test","navigator","userAgent","max","hardwareConcurrency","toLowerCase","indexOf","isIE","workerBlob","generateWorkerBlob","SharedHamster","e","key","hasOwnProperty","URL","createObjectURL","createBlob","String","giveHamsterWork","i","push","spawnHamster","ie10","workerWorker","textContent","Blob","BlobMaker","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blob","append","type","getBlob","self","addEventListener","port","ports","start","params","data","rtn","dataType","fn","eval","postMessage","results","typedArrayFromBuffer","buffer","types","Uint32Array","Uint16Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","onmessage","Function","taskOptions","id","inputArray","hamsterFood","aggregate","onSuccess","task","thread_id","hamster","trackThread","trackInput","legacyProcessor","output","chewThread","workers","length","count","getOutput","cache","input","array","n","threadArrays","size","Math","ceil","slice","subarray","prepareFunction","operator","startIndex","limit","incrementBy","functionBody","startingIndex","endingIndex","substring","string","JSON","parse","json","stringify","functionToRun","Promise","resolve","reject","newTask","work","onSuccessCallback","numberOfWorkers","sortOrder","inputParams","performance","threadCount","cacheResults","workerCount","prepareAndSaveTaskOptions","hamstersWork","then","catch","error","console","message","workArray","threadId","poolThread","trainHamster","feedHamster","info","Date","getTime","libraryScope","onThreadResponse","threadResponse","order","sort","libraryContext","processQueue","shift","terminate","onThreadError","timeStamp","now","lineno","filename","onerror","round","random","reduce","a","b","concat","len","bufferLength","processDataType","offset","set","cachedResult","arr","Array","prototype","call","reverse","workerid","taskid","startTime","cb","agg","setTimeout","success","item","splice","processData","food","buffers","module","exports"],"mappings":"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","file":"hamsters.node.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bb9647bd755ea3689b2e","  /*\n  * Title: this.js\n  * Description: Javascript library to add multi-threading support to javascript by exploiting concurrent web workers\n  * Author: Austin K. Smith\n  * Contact: austin@asmithdev.com\n  * Copyright: 2015 Austin K. Smith - austin@asmithdev.com\n  * License: Artistic License 2.0\n  */\n\n  /* jshint esversion: 6 */\n\n\n  class hamsters {\n     constructor() {\n      'use strict';\n\n      this.version = '4.2.2';\n      this.maxThreads = this.determineGlobalMaxThreads();\n      this.debug = false;\n      this.persistence = true;\n      this.memoize = false;\n      this.atomics = false;\n      this.legacy = false;\n      this.tools = {\n        randomArray: this.randomArray,\n        aggregateArrays: this.aggregateThreadOutputs,\n        splitArrays: this.splitArrayIntoSubArrays\n      };\n      this.habitat = {\n        browser: this.isBrowser(),\n        worker: this.isWorker(),\n        node: this.isNode(),\n        reactNative: this.isReactNative(),\n        shell: this.isShell(),\n        transferrable: this.supportsTransferrableObjects(),\n        legacy: this.isLegacyEnvironment(),\n        atomics: this.supportsAtomicOperations()\n      };\n      this.pool = {\n        uri: null,\n        tasks: [],\n        errors: [],\n        threads: [],\n        running: [],\n        pending: []\n      };\n      this.run = this.runHamsters;\n      this.promise = this.hamstersPromise;  \n      this.loop = this.hamstersLoop;\n      this.parseJson = this.parseJsonOnThread;\n      this.stringifyJson = this.stringifyJsonOnThread;\n      this.init = this.initializeLibrary;\n    }\n\n    isBrowser() {\n      return typeof window === \"object\";\n    }\n\n    isNode() {\n      return typeof process === \"object\" && typeof require === \"function\" && !this.isBrowser() && !this.isWorker();\n    }\n\n    isWorker() {\n      return typeof importScripts === \"function\";\n    }\n\n    isReactNative() {\n      return !this.isNode() && typeof global === 'object';\n    }\n\n    isShell() {\n      return this.isBrowser() && !this.isNode() && !this.isWorker() && !this.isReactNative();\n    }\n\n    supportsTransferrableObjects() {\n      return typeof Uint8Array !== 'undefined';\n    }\n\n    isLegacyEnvironment() {\n      return (this.isShell() || typeof Worker === 'undefined');\n    }\n\n    supportsAtomicOperations() {\n      return typeof SharedArrayBuffer !== 'undefined';\n    }\n\n\n    initializeLibrary(startOptions) {\n      if(typeof startOptions !== 'undefined') {\n        this.processStartOptions(startOptions);\n      }\n      if(this.habitat.browser && !this.habitat.reactNative) {\n        this.setupBrowserSupport();\n      }\n      if(this.habitat.worker && typeof SharedWorker !== 'undefined') {\n        this.setupWorkerSupport();\n      }\n      if(this.habitat.node || this.habitat.reactNative) {\n        if(typeof this.Worker !== 'undefined') {\n          global.Worker = this.Worker;\n        }\n      }\n      if(this.habitat.legacy) {\n        this.wheel = this.legacyHamsterWheel;\n      } else {\n        this.wheel = this.hamsterWheel;\n        this.spawnHamsters();\n      }\n      this.chewGarbage(startOptions);\n    }\n\n    isIE(version) {\n      return (new RegExp('msie' + (!isNaN(version) ? ('\\\\s'+version) : ''), 'i').test(navigator.userAgent));\n    }\n\n    determineGlobalMaxThreads() {\n      // Default to global thread count of 4\n      let max = 4;\n      // Detect logical core count on machine\n      if(typeof navigator !== 'undefined') {\n        if(typeof navigator.hardwareConcurrency !== 'undefined') {\n          max = navigator.hardwareConcurrency;\n        }\n        // Firefox per origin limit is 20\n        if(navigator.userAgent.toLowerCase().indexOf('firefox') !== -1 && max > 20) {\n          max = 20;\n        }\n      }\n      // Got it\n      return max;\n    }\n\n\n    setupBrowserSupport() {\n      if(typeof Worker === 'undefined' || ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'].indexOf(navigator.userAgent) !== -1 || this.isIE(10)) {\n        this.habitat.legacy = true;\n      }\n    }\n\n    setupWorkerSupport() {\n      try {\n        let workerBlob = this.generateWorkerBlob();\n        let SharedHamster = new SharedWorker(workerBlob, 'SharedHamsterWheel');\n        this.pool.uri = workerBlob;\n      } catch(e) {\n        this.habitat.legacy = true;\n      }\n    }\n\n    processStartOptions(startOptions) {\n      for(var key in startOptions) {\n        if(startOptions.hasOwnProperty(key)) {\n          hamsters[key] = startOptions[key];\n        }\n      }\n    }\n\n    generateWorkerBlob() {\n      return URL.createObjectURL(this.createBlob('(' + String(this.giveHamsterWork()) + ')();'));\n    }\n\n    spawnHamsters() {\n      if(this.habitat.browser) {\n        this.pool.uri = this.generateWorkerBlob();\n      }\n      if(this.persistence) {\n        let i = this.maxThreads;\n        for (i; i > 0; i--) {\n          this.pool.threads.push(this.spawnHamster());\n        }\n      }\n    }\n\n    spawnHamster() {\n      if(this.habitat.ie10) {\n        return new Worker('src/common/wheel.min.js');\n      } else if(this.habitat.worker) {\n        return new SharedWorker(this.pool.uri, 'SharedHamsterWheel');\n      } else if (this.habitat.node) {\n        return new Worker(this.giveHamsterWork());\n      } else {\n        return new Worker(this.pool.uri);\n      }\n    }\n\n    giveHamsterWork() {\n      if(this.habitat.worker) {\n        return this.workerWorker;\n      }\n      return this.worker;\n    }\n\n    createBlob(textContent) {\n      if(!Blob) {\n        let BlobMaker = (BlobBuilder || WebKitBlobBuilder || MozBlobBuilder || MSBlobBuilder);\n        let blob = new BlobMaker();\n        blob.append([textContent], {\n          type: 'application/javascript'\n        });\n        return blob.getBlob();\n      } \n      return new Blob([textContent], {\n        type: 'application/javascript'\n      });\n    }\n\n    workerWorker() {\n      self.addEventListener(\"connect\", function(e) {\n        const port = e.ports[0];\n        port.start();\n        port.addEventListener(\"message\", function(e) {\n          self.params = e.data;\n          self.rtn = {\n            data: [],\n            dataType: params.dataType\n          };\n          let fn = eval(\"(\" + params.fn + \")\");\n          if (fn) {\n            fn();\n          }\n          port.postMessage({\n            results: rtn\n          });\n        }, false);\n      }, false);\n    }\n\n    worker() {\n      self.typedArrayFromBuffer = function(dataType, buffer) {\n        const types = {\n          'uint32': Uint32Array,\n          'uint16': Uint16Array,\n          'uint8': Uint8Array,\n          'uint8clamped': Uint8ClampedArray,\n          'int32': Int32Array,\n          'int16': Int16Array,\n          'int8': Int8Array,\n          'float32': Float32Array,\n          'float64': Float64Array\n        };\n        if(!types[dataType]) {\n          return buffer;\n        }\n        return new types[dataType](buffer);\n      };\n\n      self.onmessage = function(e) {\n        self.params = e.data;\n        self.rtn = {\n          data: [],\n          dataType: params.dataType\n        };\n        let fn = new Function(params.fn);\n        if(fn) {\n          fn();\n        }\n        if(params.dataType) {\n          rtn.data = self.typedArrayFromBuffer(params.dataType, rtn.data);\n          postMessage({\n            results: rtn\n          }, [rtn.data.buffer]);\n        } else {\n          postMessage({\n            results: rtn\n          });\n        }\n      };\n    }\n\n    newTask(taskOptions) {\n      this.pool.tasks.push(taskOptions);\n      return this.pool.tasks[taskOptions.id];\n    }\n\n    legacyHamsterWheel(inputArray, hamsterFood, aggregate, onSuccess, task, thread_id, hamster, memoize) {\n      this.trackThread(task, thread_id);\n      if(memoize || this.debug) {\n        this.trackInput(inputArray, thread_id, task, hamsterFood);\n      }\n      legacyProcessor(hamsterFood, inputArray, function(output) {\n        this.chewThread(task, thread_id);\n        task.output[thread_id] = output.data;\n        if(task.workers.length === 0 && task.count === task.threads) {\n          onSuccess(getOutput(task.output, aggregate, output.dataType));\n          this.pool.tasks[task.id] = null;\n          if(this.cache && memoize !== false) {\n            memoize(task.fn, task.input, output.data, output.dataType);\n          }\n        }\n      });\n      task.count += 1; //Thread finished\n    }\n\n    chewGarbage(startOptions) {\n      delete this.init;\n      startOptions = null;\n    }\n\n\n    splitArrayIntoSubArrays(array, n) {\n      let i = 0;\n      let threadArrays = [];\n      let size = Math.ceil(array.length/n);\n      if(array.slice) {\n        while(i < array.length) {\n          threadArrays.push(array.slice(i, i += size));\n        }\n      } else {\n        while (i < array.length) {\n          threadArrays.push(array.subarray(i, i += size));\n        }\n      }\n      return threadArrays;\n    }\n\n    hamstersLoop(input, onSuccess) {\n      let params = {\n        run: this.prepareFunction(input.operator),\n        init: input.startIndex || 0,\n        limit: input.limit,\n        array: input.array,\n        incrementBy: input.incrementBy || 1,\n        dataType: input.dataType || null,\n        worker: this.habitat.worker\n      };\n      this.runHamsters(params, function() {\n        let operator = params.run;\n        if(typeof operator === \"string\") {\n          if(params.worker) {\n            operator = eval(\"(\" + operator + \")\");\n          } else {\n            operator = new Function(operator);\n          }\n        }\n        if(!params.limit) {\n          params.limit = params.array.length;\n        }\n        var i = params.init;\n        for (i; i < params.limit; i += params.incrementBy) {\n          rtn.data[i] = operator(params.array[i]);\n        }\n      }, function(rtn) {\n        onSuccess(rtn);\n      }, input.threads, 1, input.dataType);\n    }\n\n    prepareFunction(functionBody) {\n      if(!this.habitat.legacy) {\n        functionBody = String(functionBody);\n        if(!this.habitat.worker) {\n          let startingIndex = (functionBody.indexOf(\"{\") + 1);\n          let endingIndex = (functionBody.length - 1);\n          return functionBody.substring(startingIndex, endingIndex);\n        }\n      }\n      return functionBody;\n    }\n\n    parseJsonOnThread(string, onSuccess) {\n      this.runHamsters({input: string}, function() {\n        rtn.data = JSON.parse(params.input);\n      }, function(output) {\n        onSuccess(output[0]);\n      }, 1);\n    }\n\n    stringifyJsonOnThread(json, onSuccess) {\n      this.runHamsters({input: json}, function() {\n        rtn.data = JSON.stringify(params.input);\n      }, function(output) {\n        onSuccess(output[0]);\n      }, 1);\n    }\n\n    hamstersPromise(params, functionToRun) {\n      return new Promise((resolve, reject) => {\n         let task = this.newTask(params);\n         let results = this.work(task, functionToRun);\n         if(results) {\n          resolve(results);\n         } else {\n          reject('Error processing');\n         }\n      });\n    }\n\n    prepareAndSaveTaskOptions(params, functionToRun, onSuccessCallback, numberOfWorkers, aggregateThreadOutputs, dataType, memoize, sortOrder) {\n      var taskOptions = {\n        inputParams: params,\n        id: this.pool.tasks.length,\n        count: 0,\n        performance: [],\n        workers: [],\n        input: [],\n        output: [],\n        threadCount: numberOfWorkers || 1,\n        operator: this.prepareFunction(functionToRun),\n        sortOrder: sortOrder,\n        cacheResults: memoize,\n        aggregateThreadOutputs: aggregateThreadOutputs || false,\n        dataType: dataType ? dataType.toLowerCase() : 'na',\n        onSuccess: onSuccessCallback\n      };\n      taskOptions.inputParams.dataType = taskOptions.dataType;\n      return this.newTask(taskOptions);\n    }\n\n    runHamsters(params, functionToRun, onSuccess, numberOfWorkers, aggregateThreadOutputs, dataType, cacheResults, sortOrder) {\n      // Legacy processing use only 1 simulated thread, avoid doing extra work splitting & aggregating\n      let workerCount = (this.habitat.legacy ? 1 : (numberOfWorkers || 1));\n      let task = this.prepareAndSaveTaskOptions(params, functionToRun, onSuccess, workerCount, aggregateThreadOutputs, dataType, cacheResults, sortOrder);\n      this.hamstersWork(task).then(function(results) {\n        onSuccess(results);\n      }).catch(function(error) {\n        console.error(error.message, error);\n      });\n    }\n\n    hamstersWork(task) {\n      return new Promise((resolve, reject) => {\n        let workArray = task.inputParams.array;\n        if(workArray && task.threadCount !== 1) {\n          let i = 0;\n          workArray = this.splitArrayIntoSubArrays(workArray, task.threadCount); //Divide our array into equal array sizes\n          while(i < task.threads) {\n            this.wheel(workArray[i], task, resolve, reject);\n            i += 1;\n          }\n        } else {\n          this.wheel(workArray, task, resolve, reject);\n        }\n      });\n    }\n\n    hamsterWheel(inputArray, task, resolve, reject) {\n      let threadId = this.pool.running.length;\n      var hamster = {};\n      if(this.maxThreads === threadId) {\n        this.poolThread(inputArray, task, threadId, resolve, reject);\n      } else {\n        if(this.persistence) {\n          hamster = this.pool.threads[threadId];\n        } else {\n          hamster = spawnHamster();\n        }\n        this.trainHamster(threadId, task, hamster, resolve, reject);\n        this.trackThread(task, threadId);\n        hamsterFood.array = inputArray;\n        this.feedHamster(hamster, hamsterFood);\n        task.count += 1; //Increment count, thread is running\n        if(this.debug === 'verbose') {\n          console.info('Spawning Hamster #' + thread_id + ' @ ' + new Date().getTime());\n        }\n      }\n    }\n\n    trainHamster(threadId, task, hamster, resolve, reject) {\n      var libraryScope = this;\n      // Handle successful response from a thread\n      var onThreadResponse = function(e, results) {\n        let threadResponse = e.data.results;\n        libraryScope.chewThread(task, threadId);\n        results = e.data.results;\n        task.output[id] = results.data;\n        if(task.workers.length === 0 && task.count === task.threads) {\n          var output = libraryScope.getOutput(task.output, task.aggregateThreadOutputs, task.dataType);\n          if(task.order) {\n            resolve(sort(output, task.order));\n          } else {\n            resolve(output);\n          }\n          libraryScope.pool.tasks[task.id] = null; //Clean up our task, not needed any longer\n        }\n        if(libraryContext.pool.pending.length !== 0) {\n          libraryContext.processQueue(hamster, libraryContext.pool.pending.shift());\n        } else if(!libraryContext.persistence && !libraryContext.habitat.worker) {\n          hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n        }\n      };\n\n      // Handle error response from a thread\n      var onThreadError = function(e) {\n        if(!libraryScope.habitat.worker) {\n          hamster.terminate(); //Kill the thread\n        }\n        var error = {\n          timeStamp: Date.now(),\n          threadId: threadId,\n          message: `Error Hamster #${id}: Line ${e.lineno} in ${e.filename}: ${e.message}`\n        };\n        libraryScope.pool.errors.push(error);\n        reject(error);\n      };\n\n      if(this.habitat.worker) {\n        hamster.port.onmessage = onThreadResponse;\n        hamster.port.onerror = onThreadError;\n      } else {\n        hamster.onmessage = onThreadResponse;\n        hamster.onerror = onThreadError;\n      }   \n    }\n\n    randomArray(count, onSuccess) {\n      var randomArray = [];\n      while(count > 0) {\n        randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n        count -= 1;\n      }\n      onSuccess(randomArray);\n    }\n\n    aggregateThreadOutputs(input, dataType) {\n      if(!dataType || !this.habitat.transferrable) {\n        return input.reduce(function(a, b) {\n          return a.concat(b);\n        });\n      }\n      let i = 0;\n      let len = input.length;\n      let bufferLength = 0;\n      for (i; i < len; i += 1) {\n        bufferLength += input[i].length;\n      }\n      let output = this.processDataType(dataType, bufferLength);\n      let offset = 0;\n      for (i = 0; i < len; i += 1) {\n        output.set(input[i], offset);\n        offset += input[i].length;\n      }\n      return output;\n    }\n\n    checkCache(fn, input, dataType) {\n      let cachedResult = this.cache[fn];\n      if(cachedResult) {\n        if(cachedResult[0] === input && cachedResult[2] === dataType) {\n          return cachedResult;\n        }\n      }\n    }\n\n    memoize(fn, inputArray, output, dataType) {\n      this.cache[fn] = [inputArray, output, dataType];\n    }\n\n    sort(arr, order) {\n      switch(order) {\n        case 'desc':\n        case 'asc':\n          return Array.prototype.sort.call(arr, function(a, b) {\n            return (order === 'asc' ? (a - b) : (b - a)); \n          });\n        case 'ascAlpha':\n          return arr.sort();\n        case 'descAlpha':\n          return arr.reverse();\n        default:\n          return arr;\n      }\n    }\n\n\n    assignOutput(task, inputArray) {\n      if(!task || !inputArray || !this.habitat.atomics) {\n        return;\n      }\n      task.output = new SharedArrayBuffer(inputArray.length);\n    }\n\n    trackInput(inputArray, thread_id, task, hamsterFood) {\n      task.input.push({ \n        input: inputArray,\n        workerid: thread_id, \n        taskid: task.id, \n        params: hamsterFood, \n        start: Date.now()\n      });\n    }\n\n    trackThread(task, id) {\n      task.startTime = Date.now();\n      task.workers.push(id); //Keep track of threads scoped to current task\n      this.pool.running.push(id); //Keep track of all currently running threads\n    }\n\n    poolThread(inputArray, hamsterFood, thread_id, cb, task, agg, memoize) {\n      this.pool.pending.push({\n        memoize: memoize,\n        input: inputArray,\n        params: hamsterFood,\n        workerid: thread_id, \n        onSuccess: cb, \n        task: task,\n        aggregate: agg\n      });\n    }\n\n    legacyProcessor(params, inputArray, onSuccess) {\n      setTimeout(function() {\n        var rtn = {\n          success: true, \n          data: []\n        };\n        var params = params;\n        params.array = inputArray;\n        params.fn();\n        if(params.dataType && params.dataType != \"na\") {\n          rtn.data = this.processDataType(params.dataType, rtn.data);\n          rtn.dataType = params.dataType;\n        }\n        onSuccess(rtn);\n      }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n    }\n\n    getOutput(output, aggregate, dataType) {\n      if(aggregate && output.length <= 20) {\n        return this.aggregateThreadOutputs(output, dataType);\n      }\n      return output;\n    }\n\n    processQueue(hamster, item) {\n      if(!item) {\n        return;\n      }\n      this.wheel(item.input, item.params, item.aggregate, item.onSuccess, item.task, item.workerid, hamster, item.memoize); //Assign most recently finished thread to queue item\n    }\n\n    chewThread(task, id) {\n      this.pool.running.splice(this.pool.running.indexOf(id), 1); //Remove thread from running pool\n      task.workers.splice(task.workers.indexOf(id), 1); //Remove thread from task running pool\n    }\n\n    processData(dataType, buffer) {\n      const types = {\n        'uint32': Uint32Array,\n        'uint16': Uint16Array,\n        'uint8': Uint8Array,\n        'uint8clamped': Uint8ClampedArray,\n        'int32': Int32Array,\n        'int16': Int16Array,\n        'int8': Int8Array,\n        'float32': Float32Array,\n        'float64': Float64Array\n      };\n      if(!types[dataType]) {\n        return dataType;\n      }\n      return new types[dataType](buffer);\n    }\n\n    processDataType(dataType, buffer) {\n      if(this.habitat.transferrable) {\n        return this.processData(dataType, buffer);\n      }\n      return buffer;\n    }\n\n    feedHamster(hamster, food) {\n      if(this.habitat.worker) {\n        return hamster.port.postMessage(food);\n      }\n      if(this.habitat.ie10) {\n        return hamster.postMessage(food);\n      }\n      let buffers = [], key;\n      for(key in food) {\n        if(food.hasOwnProperty(key) && food[key] && food[key].buffer) {\n          buffers.push(food[key].buffer);\n        }\n      }\n      return hamster.postMessage(food,  buffers);\n    } \n\n  }\n\n  module.exports = new hamsters();\n\n\n\n// WEBPACK FOOTER //\n// ./src/hamsters.js"],"sourceRoot":""}