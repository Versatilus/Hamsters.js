{"version":3,"sources":["webpack:///webpack/bootstrap 6b0c9db9d4a46df5472f","webpack:///./src/hamsters.js","webpack:///./src/core/version.js","webpack:///./src/core/habitat.js","webpack:///./~/node-libs-browser/~/process/browser.js","webpack:///./src/core/data.js","webpack:///./src/core/pool.js","webpack:///./src/core/wheel.js","webpack:///./src/core/logger.js","webpack:///./src/core/memoizer.js"],"names":["hamstersjs","persistence","memoize","atomics","debug","version","maxThreads","logicalThreads","habitat","data","pool","logger","memoizer","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","info","processStartOptions","spawnHamsters","selectHamsterWheel","habitatKeys","key","hasOwnProperty","indexOf","toLowerCase","params","functionToRun","scope","id","tasks","length","count","aggregate","output","workers","dataType","input","legacy","threads","hamstersJob","prepareJob","Promise","resolve","reject","task","hamstersTask","scheduleTask","then","results","catch","error","messsage","onSuccess","onError","scaffold","hamsters","module","exports","majorVersion","minorVersion","patchVersion","hamstersVersion","browser","isBrowser","webWorker","isWebWorker","node","isNode","reactNative","isReactNative","shell","isShell","transferrable","supportsTransferrableObjects","isLegacyEnvironment","supportsAtomicOperations","proxies","supportsProxies","isIE","isInternetExplorer","determineGlobalThreads","Worker","locateWorkerObject","sharedWorker","locateSharedWorkerObject","max","navigator","hardwareConcurrency","userAgent","SharedWorker","window","RegExp","isNaN","test","process","importScripts","global","isIE10","lacksWorkerSupport","legacyAgents","workerBlob","generateBlob","SharedHamster","workerURI","e","Uint8Array","SharedArrayBuffer","Proxy","hamstersHabitat","randomArray","aggregateArrays","aggregateThreadOutputs","splitArrays","splitArrayIntoSubArrays","createBlob","createDataBlob","generateWorkerBlob","processDataType","sortOutput","sortArray","getOutput","prepareOutput","prepareFunction","feedHamster","messageWorker","prepareMeal","prepareHamsterFood","hamsterFood","array","hamster","port","postMessage","ie10","prepareTransferBuffers","buffers","buffer","push","Array","isArray","ArrayBuffer","functionBody","String","startingIndex","endingIndex","substring","workerLogic","functionString","hamsterBlob","URL","createObjectURL","typedArrayFromBuffer","arr","order","prototype","sort","call","a","b","reverse","types","Uint32Array","Uint16Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","textContent","Blob","BlobMaker","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blob","append","type","getBlob","Math","round","random","reduce","concat","i","len","bufferLength","offset","set","n","threadArrays","size","ceil","slice","subarray","hamstersData","running","pending","fetchHamster","grabHamster","wheel","arguments","item","runTask","threadId","spawnHamster","index","threadArray","registerTask","keepTrackOfThread","trainHamster","addWorkToPending","onThreadResponse","message","splice","returnOutputAndRemoveTask","processQueue","shift","terminate","onThreadError","errorFromThread","onmessage","onerror","worker","regular","hamsterWheel","hamsterPool","workerScaffold","regularScaffold","legacyScaffold","self","rtn","addEventListener","incomingConnection","ports","start","incomingMessage","threadStart","Date","now","eval","threadEnd","prepareReturn","returnObject","Function","setTimeout","hamstersWheel","logBook","warning","infoLog","warningLog","errorLog","saveLogEntry","saveToLogBook","getLogEntries","fetchLogBook","searchLogEntries","searchLogBook","timeStamp","timeStampedMessage","console","errorMessage","lineno","filename","eventType","logBookEntries","string","searchResults","searchString","eventTypeResults","tmpEntries","findStringInLogBook","finalResults","findStringInLogBookAllTypes","total","hamstersLogger","maxCacheEntries","cacheEntries","itemCached","isItemCached","fetchItem","fetchItemFromCache","saveItem","saveItemToCache","method","fn","cacheItem","cachedResult","cache","itemToCache","cachedItems","hamstersMemoizer"],"mappings":"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AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAqC;;AAErC;AACA;AACA;;AAEA,4BAA2B;AAC3B;AACA;AACA;AACA,6BAA4B,UAAU;;;;;;;;;sjBCvLtC;;AAEA;;;;;;;;;AASA;;;;;;;;AAEA;;KAEMvG,I;;AAEJ;;;;AAIA,mBAAc;AAAA;;AACZ,UAAKwG,WAAL,GAAmB,KAAKA,WAAxB;AACA,UAAKC,eAAL,GAAuB,KAAKC,sBAA5B;AACA,UAAKC,WAAL,GAAmB,KAAKC,uBAAxB;AACA,UAAKC,UAAL,GAAkB,KAAKC,cAAvB;AACA,UAAKd,YAAL,GAAoB,KAAKe,kBAAzB;AACA,UAAK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","file":"hamsters.web.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6b0c9db9d4a46df5472f","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersVersion from './core/version';\nimport hamstersHabitat from './core/habitat';\nimport hamstersPool from './core/pool';\nimport hamstersData from './core/data';\nimport hamstersWheel from './core/wheel';\nimport hamstersLogger from './core/logger';\nimport hamstersMemoizer from './core/memoizer';\n\n'use strict';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.persistence = true;\n    this.memoize = false;\n    this.atomics = false;\n    this.debug = false;\n    this.version = hamstersVersion;\n    this.maxThreads = hamstersHabitat.logicalThreads;\n    this.habitat = hamstersHabitat;\n    this.data = hamstersData;\n    this.pool = hamstersPool;\n    this.logger = hamstersLogger;\n    this.memoizer = hamstersMemoizer;\n    this.run = this.hamstersRun;\n    this.promise = this.hamstersPromise;\n    this.init = this.initializeLibrary;\n  }\n\n  /**\n  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    this.logger.info(`Preparing the hamster wheels & readying hamsters`);\n    if (typeof startOptions !== 'undefined') {\n      this.processStartOptions(startOptions);\n    }\n    hamstersPool.spawnHamsters(this.persistence, hamstersPool.selectHamsterWheel(), this.maxThreads);\n    delete this.init;\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    let habitatKeys = ['worker', 'sharedWorker', 'legacy'];\n    for (var key in startOptions) {\n      if (startOptions.hasOwnProperty(key)) {\n        if (habitatKeys.indexOf(key.toLowerCase()) !== -1) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          this[key] = startOptions[key];\n        }\n      }\n    }\n  }\n\n  /**\n  * @constructor\n  * @function hamstersTask - Constructs a new task object from provided arguments\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {object} scope - Reference to main library context\n  * @return {object} new Hamsters.js task\n  */\n  hamstersTask(params, functionToRun, scope) {\n    this.id = scope.pool.tasks.length;\n    this.count = 0;\n    this.aggregate = (params.aggregate || false);\n    this.output = [];\n    this.workers = [];\n    this.memoize = (params.memoize || false);\n    this.dataType = (params.dataType ? params.dataType.toLowerCase() : null);\n    this.input = params;\n    // Do not modify function if we're running on the main thread for legacy fallback\n    if(hamstersHabitat.legacy) {\n      this.threads = 1;\n      this.input.hamstersJob = functionToRun;\n    } else {\n      this.threads = (params.threads || 1);\n      this.input.hamstersJob = scope.data.prepareJob(functionToRun);\n    }\n  }\n\n  /**\n  * @async\n  * @function hamstersPromise - Calls library functionality using async promises\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @return {array} Results from functionToRun.\n  */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      let task = new this.hamstersTask(params, functionToRun, this);\n      this.pool.scheduleTask(task, this.persistence, this.maxThreads).then((results) => {\n        resolve(results);\n      }).catch((error) => {\n        hamstersLogger.error(error.messsage, reject);\n      });\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {function} onSuccess - Function to call upon successful execution\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    let task = new this.hamstersTask(params, functionToRun, this);\n    let scaffold = hamstersPool.selectHamsterWheel();\n    this.pool.scheduleTask(task, this.persistence, scaffold, this.maxThreads).then((results) => {\n      onSuccess(results);\n    }).catch((error) => {\n      hamstersLogger.error(error.messsage, onError);\n    });\n  }\n}\n\nvar hamsters = new hamstersjs();\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsters;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/hamsters.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/*\n* Title: Hamsters.js\n* Description: Javascript library to add multi-threading support to javascript by exploiting concurrent web workers\n* Author: Austin K. Smith\n* Contact: austin@asmithdev.com\n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com\n* License: Artistic License 2.0\n*/\n\n'use strict';\n\nconst majorVersion = 5;\nconst minorVersion = 0;\nconst patchVersion = 0;\nconst hamstersVersion = `${majorVersion}.${minorVersion}.${patchVersion}`;\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersVersion;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/version.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\n\n'use strict';\n\nclass habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferrable = this.supportsTransferrableObjects();\n    this.legacy = this.isLegacyEnvironment();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer;\n    this.logicalThreads = this.determineGlobalThreads();\n    this.Worker = this.locateWorkerObject();\n    this.sharedWorker = this.locateSharedWorkerObject();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(typeof navigator !== 'undefined') {\n      if(typeof navigator.hardwareConcurrency !== 'undefined') {\n        max = navigator.hardwareConcurrency;\n      }\n      if(max > 20 && navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n        max = 20;\n      }\n    }\n    // if(this.isNode() && typeof os !== 'undefined') {\n    //   max = os.cpus().length;\n    // }\n    return max;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined') ? Worker : null;\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined') ? SharedWorker : null;\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return typeof window === \"object\";\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer(version) {\n    return (new RegExp('msie' + (!isNaN(version) ? ('\\\\s'+version) : ''), 'i').test(navigator.userAgent));\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return typeof process === \"object\" && typeof require === \"function\" && !this.isBrowser() && !this.isWebWorker();\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a webworker\n  */\n  isWebWorker() {\n    return typeof importScripts === \"function\";\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is reactNative\n  */\n  isReactNative() {\n    return !this.isNode() && typeof global === 'object';\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return this.isBrowser() && !this.isNode() && !this.isWebWorker() && !this.isReactNative();\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    // Force legacy mode for known devices that don't support threading\n    if (this.isBrowser() && !this.isReactNative()) {\n      let isIE10 = this.habitat.isIE(10);\n      let userAgent = navigator.userAgent;\n      let lacksWorkerSupport = (typeof this.Worker === 'undefined');\n      let legacyAgents = ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'];\n      if (lacksWorkerSupport || legacyAgents.indexOf(userAgent) !== -1 || isIE10) {\n        this.legacy = true;\n      }\n    }\n    // Detect sharedWorker support for use within webworkers\n    if (this.webWorker && typeof this.SharedWorker !== 'undefined') {\n      try {\n        let workerBlob = hamstersData.generateBlob();\n        let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n        hamstersData.workerURI = workerBlob;\n      } catch (e) {\n        this.legacy = true;\n      }\n    }\n    // Final check, if we're in a shell environment or we have no worker object use legacy mode\n    if(!this.legacy) {\n      return this.isShell() || !this.locateWorkerObject();\n    }\n  }\n\n  /**\n  * @function supportsTransferrableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferrableObjects() {\n    return typeof Uint8Array !== 'undefined';\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n  */\n  supportsAtomicOperations() {\n    return typeof SharedArrayBuffer !== 'undefined';\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports proxy objects\n  */\n  supportsProxies() {\n    return typeof Proxy !== 'undefined';\n  }\n}\n\nvar hamstersHabitat = new habitat();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersHabitat;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/habitat.js","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/node-libs-browser/~/process/browser.js\n// module id = 4\n// module chunks = 0","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersHabitat from './habitat';\n\n'use strict';\n\nclass data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.randomArray = this.randomArray;\n    this.aggregateArrays = this.aggregateThreadOutputs;\n    this.splitArrays = this.splitArrayIntoSubArrays;\n    this.createBlob = this.createDataBlob;\n    this.generateBlob = this.generateWorkerBlob;\n    this.processDataType = this.processDataType;\n    this.sortOutput = this.sortArray;\n    this.getOutput = this.prepareOutput;\n    this.prepareJob = this.prepareFunction;\n    this.feedHamster = this.messageWorker;\n    this.prepareMeal = this.prepareHamsterFood;\n    this.workerURI = null;\n  }\n\n  /**\n  * @function prepareHamsterFood - Prepares message to send to thread(s)\n  * @param {object} task - Task to process\n  */\n  prepareHamsterFood(task) {\n    let hamsterFood = task.input;\n    for (var key in task.input) {\n      if (task.input.hasOwnProperty(key) && key !== 'array') {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n    hamsterFood.array = task.input.array;\n    if (task.hamstersJob && !hamsterFood.hamstersJob) {\n      hamsterFood.hamstersJob = hamstersJob;\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function messageWorker - Prepares message to send to thread\n  * @param {worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorker(hamster, hamsterFood) {\n    if (hamstersHabitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    if (hamstersHabitat.ie10) {\n      return hamster.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.prepareTransferBuffers(hamsterFood));\n  }\n\n  /**\n  * @function prepareTransferBuffers - Prepares transferrable buffers for faster message passing\n  * @param {object} hamsterFood - Message to send to thread\n  */\n  prepareTransferBuffers(hamsterFood) {\n    let buffers = [];\n    let key = null;\n    if(hamstersHabitat.transferrable) {\n      for (key in hamsterFood) {\n        if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n          if(hamsterFood[key].buffer) {\n            buffers.push(hamsterFood[key].buffer);\n          } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n            buffers.push(new ArrayBuffer(hamsterFood[key]));\n          }\n        }\n      }\n    }\n    return buffers;\n  }\n\n  /**\n  * @function prepareFunction - Prepares transferrable buffers for faster message passing\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareFunction(functionBody) {\n    if (!hamstersHabitat.legacy) {\n      functionBody = String(functionBody);\n      if (!hamstersHabitat.webWorker) {\n        let startingIndex = (functionBody.indexOf(\"{\") + 1);\n        let endingIndex = (functionBody.length - 1);\n        return functionBody.substring(startingIndex, endingIndex);\n      }\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    let functionString = '(' + String(workerLogic) + ')();';\n    let hamsterBlob = this.createBlob(functionString);\n    return URL.createObjectURL(hamsterBlob);\n  }\n\n  /**\n  * @function processDataType - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  processDataType(dataType, buffer) {\n    if(hamstersHabitat.transferrable) {\n      return this.typedArrayFromBuffer(dataType, buffer);\n    }\n    return buffer;\n  }\n\n  /**\n  * @function prepareOutput - Prepares final task output\n  * @param {task} buffer - Task to prepare output for\n  */\n  prepareOutput(task) {\n    if(task.aggregate && task.threads !== 1) {\n      return this.aggregateThreadOutputs(task.output, task.dataType);\n    }\n    return task.output;\n  }\n\n  /**\n  * @function sortArray - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortArray(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'uint32': Uint32Array,\n      'uint16': Uint16Array,\n      'uint8': Uint8Array,\n      'uint8clamped': Uint8ClampedArray,\n      'int32': Int32Array,\n      'int16': Int16Array,\n      'int8': Int8Array,\n      'float32': Float32Array,\n      'float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return dataType;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function createDataBlob - Creates new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = (BlobBuilder || WebKitBlobBuilder || MozBlobBuilder || MSBlobBuilder);\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    } \n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function randomArray - Creates new random array\n  * @param {number} count - Number of random elements in array\n  * @param {function} onSuccess - onSuccess callback\n  */\n  randomArray(count, onSuccess) {\n    var randomArray = [];\n    while(count > 0) {\n      randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n      count -= 1;\n    }\n    onSuccess(randomArray);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType || !hamstersHabitat.transferrable) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function splitArrayIntoSubArrays - Splits a single array into multiple equal sized subarrays\n  * @param {array} array - Array to split\n  * @param {number} n - Number of subarrays to create\n  */\n  splitArrayIntoSubArrays(array, n) {\n    let i = 0;\n    let threadArrays = [];\n    let size = Math.ceil(array.length/n);\n    if(array.slice) {\n      while(i < array.length) {\n        threadArrays.push(array.slice(i, i += size));\n      }\n    } else {\n      while (i < array.length) {\n        threadArrays.push(array.subarray(i, i += size));\n      }\n    }\n    return threadArrays;\n  }\n}\n\nvar hamstersData = new data();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersData;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/data.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\nimport hamstersWheel from './wheel';\nimport hamstersLogger from './logger';\n\n'use strict';\n\nclass pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.tasks = [];\n\t  this.threads = [];\n    this.running = [];\n    this.pending = [];\n    this.fetchHamster = this.grabHamster;\n    this.selectHamsterWheel = this.selectHamsterWheel;\n  }\n\n  /**\n  * @function grabHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(array, task, persistence, wheel, resolve, reject) {\n  \tthis.pending.push(arguments);``\n  }\n\n  /**\n  * @function grabHamster - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueue(item) {\n  \treturn this.runTask(item.array, item.task, item.persistence, item.wheel, item.resolve, item.reject);\n  }\n\n  /**\n  * @function grabHamster - Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  grabHamster(threadId, persistence, wheel) {\n    if(persistence) {\n      return this.threads[threadId];\n    }\n    return this.spawnHamster(hamstersHabitat, wheel, hamstersData.workerURI);\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    task.workers.push(id); //Keep track of threads poold to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function registerTask - Adds task to execution pool based on id\n  * @param {number} id - Id of task to register\n  */\n  registerTask(id) {\n    let index = this.tasks.push(id);\n    return this.tasks[(index - 1)];\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(persistence, wheel, maxThreads) {\n  \tlet workerURI = null;\n    if(hamstersHabitat.legacy) {\n      return;\n    }\n    if(hamstersHabitat.browser) {\n      workerURI = hamstersData.generateBlob(wheel);\n    }\n    if (persistence) {\n      hamstersLogger.info(`${maxThreads} Logical Threads Detected, Spawning ${maxThreads} Hamsters`);\n      for (maxThreads; maxThreads > 0; maxThreads--) {\n        this.threads.push(this.spawnHamster(wheel, workerURI));\n      }\n      hamstersLogger.info(`${this.threads.length} hamsters ready and awaiting instructions`);\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {string} workerURI - URI for created library blob object \n  */\n  spawnHamster(wheel, workerURI) {\n    if (hamstersHabitat.ie10) {\n      return new hamstersHabitat.Worker(wheel);\n    }\n    if (hamstersHabitat.webWorker) {\n      return new hamstersHabitat.SharedWorker(workerURI, 'SharedHamsterWheel');\n    }\n    if ((hamstersHabitat.node || hamstersHabitat.reactNative) && !hamstersHabitat.browser) {\n      return new hamstersHabitat.Worker(wheel);\n    }\n    return new hamstersHabitat.Worker(workerURI);\n  }\n\n  /**\n  * @function prepareMeal - Prepares message to send to a thread and invoke execution\n  * @param {object} threadArray - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @return {object} hamsterFood - Prepared message to send to a thread\n  */\n  prepareMeal(threadArray, task) {\n    let hamsterFood = {\n    \tarray: threadArray\n    };\n    for (var key in task.input) {\n      if (task.input.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) == -1) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(array, task, persistence, wheel, resolve, reject) {\n  \tlet threadId = this.running.length;\n    let hamsterFood = this.prepareMeal(array, task);\n    this.registerTask(task.id);\n    this.keepTrackOfThread(task, threadId);\n    if(hamstersHabitat.legacy) {\n      wheel(hamsterFood, resolve, reject);\n    } else {\n      let hamster = this.grabHamster(threadId, persistence, wheel);\n      this.trainHamster(threadId, task, hamster, persistence, resolve, reject);\n      hamstersData.feedHamster(hamster, hamsterFood);\n    }\n    task.count += 1; //Increment count, thread is running\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(array, task, persistence, wheel, resolve, reject) {\n    if(this.maxThreads === this.running.length) {\n      return this.addWorkToPending(array, task, persistence, wheel, resolve, reject);\n    }\n    return this.runTask(array, task, persistence, wheel, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    let output = hamstersData.getOutput(task, hamstersHabitat.transferrable);\n    if (task.sort) {\n      output = hamstersData.sortOutput(output, task.sort);\n    }\n    this.tasks[task.id] = null; //Clean up our task, not needed any longer\n    resolve({\n      data: output\n    });\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(threadId, task, hamster, persistence, resolve, reject) {\n    let pool = this;\n    // Handle successful response from a thread\n    function onThreadResponse(message) {\n      let results = message.data;\n      pool.running.splice(pool.running.indexOf(threadId), 1); //Remove thread from running pool\n    \ttask.workers.splice(task.workers.indexOf(threadId), 1); //Remove thread from task running pool\n      task.output[threadId] = results.data; // Save results data to output\n      if (task.workers.length === 0 && task.count === task.threads) {\n        pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (pool.pending.length !== 0) {\n        pool.processQueue(pool.pending.shift());\n      }\n      if (!persistence && !hamstersHabitat.webWorker) {\n        hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    }\n    // Handle error response from a thread\n    function onThreadError(error) {\n      hamstersLogger.errorFromThread(error, reject);\n    }\n    // Register on message/error handlers\n    if (hamstersHabitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onerror = onThreadError;\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onerror = onThreadError;\n    }\n  }\n\n  /**\n  * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if (hamstersHabitat.legacy) {\n      return hamstersWheel.legacy;\n    }\n    if(hamstersHabitat.webWorker) {\n      return hamstersWheel.worker;\n    }\n    return hamstersWheel.regular;\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task, persistence, wheel, maxThreads) {\n    let threadArrays = [];\n  \tif(this.running.length === maxThreads) {\n  \t\treturn this.addWorkToPending(task, persistence, wheel, resolve, reject);\n  \t}\n\t  if(task.input.array && task.threads !== 1) {\n\t    threadArrays = hamstersData.splitArrays(task.input.array, task.threads); //Divide our array into equal array sizes\n\t  }\n  \treturn new Promise((resolve, reject) => {\n      let i = 0;\n      while (i < task.threads) {\n      \tif(threadArrays && task.threads !== 1) {\n        \tthis.hamsterWheel(threadArrays[i], task, persistence, wheel, resolve, reject);\n\t\t    } else {\n        \tthis.hamsterWheel(task.input.array, task, persistence, wheel, resolve, reject);\n\t\t    }\n        i += 1;\n      }\n    });\n  }\n}\n\nvar hamsterPool = new pool();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsterPool;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/pool.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\n\n'use strict';\n\nclass wheel {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.worker = this.workerScaffold;\n    this.regular = this.regularScaffold;\n    this.legacy = this.legacyScaffold;\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n  */\n  workerScaffold() {\n    'use strict';\n\n    self.params = {};\n    self.rtn = {};\n\n    addEventListener('connect', (incomingConnection) => {\n      const port = incomingConnection.ports[0];\n      port.start();\n      port.addEventListener('message', (incomingMessage) => {\n        params = incomingMessage.data;\n        rtn = {\n          data: [],\n          dataType: params.dataType,\n          threadStart: Date.now()\n        };\n        eval(\"(\" + params.hamstersJob + \")\")();\n        rtn.threadEnd = Date.now();\n        port.postMessage(rtn);\n      }, false);\n    }, false);\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality\n  */\n  regularScaffold() {\n    'use strict';\n\n    self.params = {};\n    self.rtn = {};\n\n    function prepareReturn(returnObject) {\n      let dataType = returnObject.dataType;\n      if(dataType) {\n        returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n      }\n      return returnObject;\n    }\n\n    function typedArrayFromBuffer(dataType, buffer) {\n      const types = {\n        'uint32': Uint32Array,\n        'uint16': Uint16Array,\n        'uint8': Uint8Array,\n        'uint8clamped': Uint8ClampedArray,\n        'int32': Int32Array,\n        'int16': Int16Array,\n        'int8': Int8Array,\n        'float32': Float32Array,\n        'float64': Float64Array\n      };\n      if (!types[dataType]) {\n        return buffer;\n      }\n      return new types[dataType](buffer);\n    }\n\n    function prepareTransferBuffers(hamsterFood) {\n      let buffers = [];\n      let key = null;\n      for (key in hamsterFood) {\n        if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n          if(hamsterFood[key].buffer) {\n            buffers.push(hamsterFood[key].buffer);\n          } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n            buffers.push(new ArrayBuffer(hamsterFood[key]));\n          }\n        }\n      }\n      return buffers;\n    }\n\n    addEventListener('message', (incomingMessage) => {\n      params = incomingMessage.data;\n      rtn = {\n        threadStart: Date.now(),\n        data: [],\n        dataType: (params.dataType ? params.dataType.toLowerCase() : null)\n      };\n      new Function(params.hamstersJob)();\n      rtn.threadEnd = Date.now();\n      postMessage(prepareReturn(rtn), prepareTransferBuffers(rtn));\n    });\n  }\n\n  /**\n  * @function legacyScaffold - Provides library functionality for legacy devices\n  */\n  legacyScaffold(params, resolve) {\n    setTimeout(() => {\n      // Node.js doesn't support self for some reason, so let's use global instead\n      // this works great for node, not so great for reactNative\n      // IOS has a secury check within React Native preventing global variable assignment\n      // Android does not have the same security restriction\n      var self = (self || global || window || this);\n      self.params = params;\n      self.rtn = {\n        threadStart: Date.now(),\n        data: []\n      };\n      params.hamstersJob();\n      rtn.threadEnd = Date.now();\n      resolve(rtn);\n    }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n  }\n};\n\nvar hamstersWheel = new wheel();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersWheel;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/wheel.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersVersion from './version';\n\n'use strict';\n\nclass logger {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.logBook = {\n      error: [], \n      warning: [], \n      info: []\n    };\n    this.info = this.infoLog;\n    this.warning = this.warningLog;\n    this.error = this.errorLog;\n    this.errorFromThread = this.errorFromThread;\n    this.saveLogEntry = this.saveToLogBook;\n    this.getLogEntries = this.fetchLogBook;\n    this.searchLogEntries = this.searchLogBook;\n  }\n\n  infoLog(message) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Info: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('info', timeStampedMessage);\n    console.info(timeStampedMessage);\n  }\n\n  warningLog(message) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Warning: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('warning', timeStampedMessage);\n    console.warning(timeStampedMessage);\n  }\n\n  errorLog(message, reject) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Error: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('error', timeStampedMessage);\n    console.error(timeStampedMessage);\n    if(reject) {\n      reject(timeStampedMessage);\n    } else {\n      return timeStampedMessage;\n    }\n  }\n\n  errorFromThread(error, reject) {\n    let errorMessage = `#${error.lineno} in ${error.filename}: ${error.message}`;\n    this.errorLog(errorMessage, reject);\n  }\n\n  saveToLogBook(eventType, message) {\n    this.logBook[eventType].push(message);\n  }\n\n  fetchLogBook(eventType) {\n    if(eventType) {\n      return this.logBook[eventType];\n    }\n    return this.logBook;\n  }\n\n  findStringInLogBook(logBookEntries, string) {\n    let searchResults = [];\n    let i = 0;\n    for (i; i < logBookEntries.length; i++) {\n      if(logBookEntries[i].indexOf(string) !== -1) {\n        searchResults.push(logBookEntries[i]);\n      }\n    }\n    return searchResults;\n  }\n\n  findStringInLogBookAllTypes(logBook, searchString) {\n    let searchResults = [];\n    let key, eventTypeResults, tmpEntries = null;\n    for(key in logBook) {\n      if(logBook.hasOwnProperty(key)) {\n        tmpEntries = logBook[key];\n        eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n      }\n    }\n    return searchResults;\n  }\n\n  searchLogBook(searchString, eventType) {\n    let finalResults = [];\n    if(eventType) {\n      finalResults = this.findStringInLogBook(this.logBook[eventType], string);\n    } else {\n      finalResults = this.findStringInLogBookAllTypes(this.logBook);\n    }\n    return {\n      total: finalResults.length,\n      results: finalResults\n    };\n  }   \n}\n\nvar hamstersLogger = new logger();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersLogger;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/logger.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass memoizer {\n  \n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.maxCacheEntries = 25;\n    this.cacheEntries = [];\n    this.itemCached = this.isItemCached;\n    this.fetchItem = this.fetchItemFromCache;\n    this.saveItem = this.saveItemToCache;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {object} input - Provided library execution options\n  * @param {method} functionToRun - Function to execute\n  * @return {object} Execution results from cache, or false\n  */\n  isItemCached(input, method) {\n  \treturn !!(this.fetchItem({fn: method, data: input})) || false;\n  }\n\n  /**\n  * @function fetchItemFromCache - Fetches cache item from cache\n  * @param {object} cacheItem - Cache item to fetch\n  * @return {object} CacheResults, or false\n  */\n  fetchItemFromCache(cacheItem) {\n  \tlet cachedResult = null;\n  \tfor(var key in this.cache) {\n  \t\tif(this.cache.hasOwnProperty(key)) {\n  \t\t\tif(cacheItem[key].fn === cacheItem.fn) {\n  \t\t\t\tif(cacheItem[key].input === cacheItem.data) {\n  \t\t\t\t\tcachedResult = cacheItem[key].input;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  \treturn cachedResult || false;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {method} functionToRun - Function to execute\n  * @param {object} data - Execution results to cache\n  */\n  saveItemToCache(method, data, maxCacheEntries) {\n  \tlet itemToCache = {\n  \t\tfn: method,\n  \t\tinput: data\n  \t};\n  \tlet cachedItems = this.cacheEntries;\n  \tif(cachedItems.length < maxCacheEntries) {\n  \t\tcachedItems.push(itemToCache);\n  \t} else {\n  \t\tcachedItems.splice(0, 0, itemToCache); \n  \t}\n  \tthis.cacheEntries = cachedItems;\n  }\n}\n\nvar hamstersMemoizer = new memoizer();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersMemoizer;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/memoizer.js"],"sourceRoot":""}